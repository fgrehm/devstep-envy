#!/bin/bash

clean-up() {
  if [[ -n "${LAST_SESSION}" ]]; then
    docker stop $LAST_SESSION
    docker rm $LAST_SESSION
  fi
}
trap clean-up SIGHUP

root-init() {
  mkdir -p /envy/users
  cp /bin/envcmd /envy/.envcmd
}

user-init() {
  # Not really needed to be defined as a variable but allows for injecting its value
  # from outside (might be useful for testing purposes)
  GH_ENVY_HOME=${GH_ENVY_HOME:-"https://github.com/$USER/envy.home.git"}

  if [[ ! -d "/envy/users/$USER" ]]; then
    mkdir -p "/envy/users/$USER"
    mkdir -p "/envy/users/$USER/envs"
    mkdir -p "/envy/users/$USER/root"
    cp /tmp/data/home/.bashrc "/envy/users/$USER/root"

    if $(wget -s $GH_ENVY_HOME &> /dev/null); then
      git clone $GH_ENVY_HOME "/envy/users/$USER/home"
    else
      mkdir -p "/envy/users/$USER/home"
      cp /tmp/data/home/.bashrc "/envy/users/$USER/home"
    fi
  fi
}

env-init() {
  if [[ ! -d "/envy/users/$USER/envs/$ENVIRON" ]]; then
    cp -R /tmp/data/env "/envy/users/$USER/envs/$ENVIRON"
  fi
  env-docker
  cd "/envy/users/$USER/envs/$ENVIRON"
  if ! docker history "$USER/$ENVIRON" &> /dev/null; then
    if [[ -n "${GIT_URL}" ]] && [[ ! -d code ]]; then
      git clone $GIT_URL code
      if [[ ! -f code/Dockerfile.envy ]]; then
        cp Dockerfile.devstep code/Dockerfile.envy
      fi
      cd code
    fi
    DOCKERFILE='Dockerfile'
    if [[ -f Dockerfile.envy ]]; then
      DOCKERFILE='Dockerfile.envy'
      # HACK: For golang projects we need to keep .git around to avoid issues
      # during build because of the way things are set up right now
      if [[ -f .dockerignore ]]; then
        sed 's|.git||g' .dockerignore -i.bkp
        cp .dockerignore .
      fi
    fi

    echo "Building environment ... "
    # docker build -t "$USER/$ENVIRON" -f $DOCKERFILE . #&> /dev/null
    docker build -t "$USER/$ENVIRON" -f $DOCKERFILE . &> /dev/null

    # HACK: See above for more
    if [[ -f .dockerignore.bkp ]]; then
      mv .dockerignore{.bkp,}
    fi
  fi
}

env-docker() {
  mkdir -p "/envy/users/$USER/envs/$ENVIRON/run"
  mkdir -p "/envy/users/$USER/envs/$ENVIRON/docker"
  if ! docker diff "$USER.$ENVIRON" &> /dev/null; then
    exposed_ports=''
    if [[ -f /envy/users/$USER/envs/$ENVIRON/exposed-ports ]]; then
      for port in $(cat /envy/users/$USER/envs/$ENVIRON/exposed-ports); do
        exposed_ports="$exposed_ports --expose $port"
      done
    fi
    docker run -d --privileged \
      --label "devstep-envy-env" \
      --name "$USER.$ENVIRON" \
      --hostname "$ENVIRON" \
      --restart always \
      --volume "$HOST_ROOT/users/$USER/envs/$ENVIRON/docker:/var/lib/docker" \
      --volume "$HOST_ROOT/users/$USER/envs/$ENVIRON/run:/var/run" \
      $exposed_ports \
      progrium/dind > /dev/null
  fi
}

env-session() {
  local session="$USER.$(date +%s)"
  local status="128"
  set +e
  while [[ "$status" == "128" ]]; do
    session-reload-env "$session"
    docker rm -f "$session" &> /dev/null
    export LAST_SESSION=$session
    docker run -it \
      --name "$session" \
      --label "devstep-envy" \
      --net "container:$USER.$ENVIRON" \
      --env "HOSTNAME=$ENVIRON" \
      --env "ENVY_SESSION=$session" \
      --env "ENVY_RANDOM=$RANDOM" \
      --env "ENVY_USER=$USER" \
      --env "ENV=/env/envyrc" \
      --env "DOCKER_HOST=unix:///env/run/docker.sock" \
      --volume "$HOST_ROOT/.envcmd:/sbin/reload:ro" \
      --volume "$HOST_ROOT/.envcmd:/sbin/rebuild:ro" \
      --volume "$HOST_ROOT/.envcmd:/sbin/switch:ro" \
      --volume "$HOST_ROOT/.envcmd:/sbin/commit:ro" \
      --volume "$HOST_ROOT/.envcmd:/sbin/expose:ro" \
      --volume "$HOST_ROOT/users/$USER/envs/$ENVIRON:/env" \
      --volume "$HOST_ROOT/users/$USER/root:/root" \
      --volume "$HOST_ROOT/users/$USER/home:/home/$USER" \
      --volume "$HOST_ROOT:/envy" \
      "$USER/$ENVIRON" $(docker-cmd "$USER/$ENVIRON")
    status=$?
  done
  docker rm -f "$session" > /dev/null
  [[ "$status" == "128" ]] || exit "$status"
}

session-reload-env() {
  declare session="$1"
  if [[ -f "/envy/users/$USER/root/$session" ]]; then
    read cmd args <<< "$(cat /envy/users/$USER/root/$session)"
    case "$cmd" in
    *rebuild)
      docker build -t "$USER/$ENVIRON" .
      ;;
    *switch)
      echo "Switching to $args ... "
      ENVIRON="$args"
      env-init
      ;;
    *commit)
      echo "Committing to ${args:-$USER/$ENVIRON} ... "
      docker commit "$session" "${args:-$USER/$ENVIRON}" > /dev/null
      ;;
    *expose)
      echo "Exposing $args ... "
      docker rm -fv "$USER.$ENVIRON" > /dev/null || true
      echo $args > /envy/users/$USER/envs/$ENVIRON/exposed-ports
      env-docker
    esac
    rm -f "/envy/users/$USER/root/$session"
  fi
}

docker-cmd() {
  declare image="$1"
  if [[ "$(docker inspect -f {{.Config.Cmd}} $image)" != "<no value>" ]]; then
    return
  fi
  if [[ "$(docker inspect -f {{.Config.Entrypoint}} $image)" != "<no value>" ]]; then
    return
  fi
  echo "/bin/sh"
}

main() {
  set -e
  : "${USER:?}" "${HOST_ROOT:?}"
  IFS="+" read USER ENVIRON <<< "${USER:?}"
  ENVIRON="${ENVIRON:-$USER}"
  GIT_URL=''
  if [[ $ENVIRON =~ 'github.com' ]]; then
    GIT_URL="https://${ENVIRON}.git"
    ENVIRON=$(echo $ENVIRON | sed 's|/|-|g' | sed 's|github.com|gh|' | tr '[:upper:]' '[:lower:]')
  fi

  root-init
  user-init
  env-init
  env-session
}

main "$@"
